// Automatically Generated by OHM - The Object Hbase Mapper
//
// Any changes made to this file may be overwritten without warning.

using Apache.Hadoop.Hbase.Thrift;

using OHM;

using System;
using System.Collections.Generic;

namespace $namespace
{
	public class $className : BaseTable
	{
		private byte[] tableNameBytes;
		private byte[] rowIDBytes;
		
		//Key Field
		protected $keyField.getTypeName() $keyField.getName();
		
#foreach( $family in $families )
		//$family.getNameUpperCase() Fields
#foreach( $field in $family.getFields())
		protected $field.getTypeName() $field.getName();
#end

#end
		//Dynamic Column Families Fields
#foreach( $family in $dynamicFamilies )
		protected DynamicColumnFamily<$family.getTypeName()> $family.getName();
#end

		//Field Changed Flags
#foreach( $family in $families )
#foreach( $field in $family.getFields())
		protected bool $field.getName()_Changed = false;
#end

#end
		//Original Indexed Fields
#foreach( $family in $families )
#foreach( $field in $family.getFields())
#if( $field.isIndexed() )
		protected $field.getTypeName() $field.getName()_Original;
#end
#end
#end

		//The OHM Connection
		private OHMConnection connection;
		
		
		public $className(OHMConnection connection, $keyField.getTypeName() $keyField.getName())
		{
			//Store the Hbase Connection
			this.connection = connection;

			//Store the key field
			this.$keyField.getName() = $keyField.getName();

			//Convert the table name
			tableNameBytes = fromString("$tableName");
			
			//Convert the row ID
			rowIDBytes = $keyField.getFromStringValue()($keyField.getName());

			//Initialise all the Dynamic Column Families
#foreach( $family in $dynamicFamilies )
			$family.getName() = new DynamicColumnFamily<$family.getTypeName()>();
#end
		}
		
		public void newKey(Random rand)
		{
			//Get the DB Interface to generate a new key
			$keyField.getName() = generateNewKey(connection, tableNameBytes, rand);

			//Convert the row ID
			rowIDBytes = $keyField.getFromStringValue()($keyField.getName());
		}
		
		//Index Accessor Methods
#foreach( $family in $families )
#foreach( $field in $family.getFields())
#if( $field.isIndexed() )
		public static bool tryGetFrom$field.getNameUpperCase()(String key, OHMConnection connection, out $className row)
		{
			byte[] index = null;

			try
			{
				//Use the index
				index = connection.getCell(fromString("usersBy$field.getNameUpperCase()"), fromString(key), fromString("index:id")).Value;
			}

			catch(Exception)
			{
				row = null;
				return false;
			}
		
			//Get the row
			row = new $className(connection, toString(index));
			return true;
		}
		
#end
#end
#end
		public override void delete()
		{
			//Delete the row
			connection.deleteRow(tableNameBytes, rowIDBytes);
		}
		
		public override void loadAll()
		{
			//Get all the values from hBase
			OHMRow rowData = connection.getRow(tableNameBytes, rowIDBytes);

			loadFromData(rowData);
		}
		
		internal void loadFromData(OHMRow rowData)
		{
			//Step through each row
			foreach(KeyValuePair<byte[],OHMCell> data in rowData.Columns)
			{
				String name = toString(data.Key);
				String[] colName = name.Split(new char[]{':'});
				
#literal()#pragma warning disable
#end
				if(false)
				{
					//Used to assist code generation
				}
#literal()#pragma warning restore
#end	
					
#foreach( $family in $families )
#foreach( $field in $family.getFields())
				else if(name.Equals("$family.getName():$field.getName()"))
				{
					$field.getName() = $field.getToStringValue()(data.Value.Value);
#if( $field.isIndexed() )
					$field.getName()_Original = $field.getToStringValue()(data.Value.Value);
#end				
				}
					
#end
#end
#foreach( $family in $dynamicFamilies )
				else if(colName[0].Equals("$family.getName()"))
				{
					roles.Columns.Add(colName[1], $family.getToStringValue()(data.Value.Value));
				}

#end
			}
		}
			
#foreach( $family in $families )
		public void load$family.getNameUpperCase()()
		{
			byte[] data;
#foreach( $field in $family.getFields())

			//Get the value from the database
			data = connection.getCell(tableNameBytes, rowIDBytes, fromString("$family.getName():$field.getName()")).Value;
			$field.getName() = $field.getToStringValue()(data);
#end
		}
		
#end			
		public override void save()
		{
			//Holds all the value changes
			OHMRowMutation changes = new OHMRowMutation(rowIDBytes);
		
#foreach( $family in $families )
#foreach( $field in $family.getFields())			
			if($field.getName()_Changed)
			{
				//Create the new cell
				OHMCell cell = new OHMCell($field.getFromStringValue()($field.getName()));
				
				//Add the update
				changes.addUpdate(fromString("$family.getName():$field.getName()"), cell);

				//Update the changed flag
				$field.getName()_Changed = false;
				
#if( $field.isIndexed() )
				byte[] indexTable = fromString("$tableName#literal()By#end$field.getNameUpperCase()");
				
				//Create the index mutation
				OHMRowMutation indexMutation = new OHMRowMutation($field.getFromStringValue()($field.getName()));

				//Create the new cell
				OHMCell indexCell = new OHMCell(rowIDBytes);

				//Add the update
				indexMutation.addUpdate(fromString("index:id"), indexCell);
				
				//Update the index
				connection.deleteRow(indexTable, $field.getFromStringValue()($field.getName()_Original));
				connection.batchRowMutation(indexTable, indexMutation);
#end	
			}
			
#end
#end
			//Update Dynamic Columns
#foreach( $family in $dynamicFamilies )
			foreach(String colName in $family.getName()#literal().DeletedColumns#end)
			{
				//Add the column to delete
				changes.addDelete(fromString("$family.getName():" + colName));
			}

			foreach(String colName in $family.getName()#literal().UpdatedColumns#end)
			{
				//Create the new cell
				OHMCell cell =  new OHMCell(fromString($family.getName()#literal().Columns[colName]#end));
				
				//Add the update
				changes.addUpdate(fromString("$family.getName():" + colName), cell);
			}
			
			$family.getName()#literal().clearPendingUpdates();#end

#end
			//Send all the value updates to the db
			connection.batchRowMutation(tableNameBytes, changes);
		}
		
		//Field Accessor Properties
		public virtual $keyField.getTypeName() $keyField.getNameUpperCase() { get { return $keyField.name; } }
		
#foreach( $family in $families )
#foreach( $field in $family.getFields())				
		public virtual $field.getTypeName() $field.getNameUpperCase() { get { return $field.name; } set { $field.name = value; $field.getName()_Changed = true; } }	
#end

#end
#foreach( $family in $dynamicFamilies )
		public virtual DynamicColumnFamily<$family.getTypeName()> $family.getNameUpperCase() { get { return $family.getName(); } }

#end
	}
	
	public class $className#literal()Scanner#end : BaseTableScanner
	{
		public $className#literal()Scanner#end (OHMConnection connection) : base(connection, BaseTable.fromString("$tableName"))
		{
		}
		
		public void open($keyField.getTypeName() key)
		{
			base.open(BaseTable.$keyField.getFromStringValue()(key));
		}
		
		public void open($keyField.getTypeName() key, List<String> colNames)
		{
			base.open(BaseTable.$keyField.getFromStringValue()(key), colNames);
		}
		
		public void openWithStop($keyField.getTypeName() startKey, $keyField.getTypeName() stopKey)
		{
			base.openWithStop(BaseTable.$keyField.getFromStringValue()(startKey), BaseTable.$keyField.getFromStringValue()(stopKey));
		}
		
		public void openWithStop($keyField.getTypeName() startKey, $keyField.getTypeName() stopKey, List<String> colNames)
		{
			base.openWithStop(BaseTable.$keyField.getFromStringValue()(startKey), BaseTable.$keyField.getFromStringValue()(stopKey), colNames);
		}
		
		public bool tryGetNext(out $className row)
		{
			OHMRow result = null;

			if(base.tryGetNext(out result))
			{
				row = new $className(connection, BaseTable.$keyField.getToStringValue()(result.RowID));
				row.loadFromData(result);
				
				return true;
			}
			else
			{
				//Set a default value
				row = null;

				return false;
			}
		}		
	}
}