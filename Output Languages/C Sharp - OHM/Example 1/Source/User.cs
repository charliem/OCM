// Automatically Generated by OHM - The Object Hbase Mapper
//
// Any changes made to this file may be overwritten without warning.

using Apache.Hadoop.Hbase.Thrift;

using OHM;

using System;
using System.Collections.Generic;

namespace OHM.Example1
{
	public class User : BaseTable
	{
		private byte[] tableNameBytes;
		private byte[] rowIDBytes;
		
		//Key Field
		protected String userID;
		
		//Auth Fields
		protected String password;
		protected String salt;
		protected bool enabled;

		//Info Fields
		protected String firstName;
		protected String lastName;
		protected String email;

		//Dynamic Column Families Fields
		protected DynamicColumnFamily<String> roles;

		//Field Changed Flags
		protected bool password_Changed = false;
		protected bool salt_Changed = false;
		protected bool enabled_Changed = false;

		protected bool firstName_Changed = false;
		protected bool lastName_Changed = false;
		protected bool email_Changed = false;

		//Original Indexed Fields
		protected String email_Original;

		//The OHM Connection
		private OHMConnection connection;
		
		
		public User(OHMConnection connection, String userID)
		{
			//Store the Hbase Connection
			this.connection = connection;

			//Store the key field
			this.userID = userID;

			//Convert the table name
			tableNameBytes = fromString("users");
			
			//Convert the row ID
			rowIDBytes = fromString(userID);

			//Initialise all the Dynamic Column Families
			roles = new DynamicColumnFamily<String>();
		}
		
		public void newKey(Random rand)
		{
			//Get the DB Interface to generate a new key
			userID = generateNewKey(connection, tableNameBytes, rand);

			//Convert the row ID
			rowIDBytes = fromString(userID);
		}
		
		//Index Accessor Methods
		public static bool tryGetFromEmail(String key, OHMConnection connection, out User row)
		{
			byte[] index = null;

			try
			{
				//Use the index
				index = connection.getCell(fromString("usersByEmail"), fromString(key), fromString("index:id")).Value;
			}

			catch(Exception)
			{
				row = null;
				return false;
			}
		
			//Get the row
			row = new User(connection, toString(index));
			return true;
		}
		
		public override void delete()
		{
			//Delete the row
			connection.deleteRow(tableNameBytes, rowIDBytes);
		}
		
		public override void loadAll()
		{
			//Get all the values from hBase
			OHMRow rowData = connection.getRow(tableNameBytes, rowIDBytes);

			loadFromData(rowData);
		}
		
		internal void loadFromData(OHMRow rowData)
		{
			//Step through each row
			foreach(KeyValuePair<byte[],OHMCell> data in rowData.Columns)
			{
				String name = toString(data.Key);
				String[] colName = name.Split(new char[]{':'});
				
#pragma warning disable
				if(false)
				{
					//Used to assist code generation
				}
#pragma warning restore
					
				else if(name.Equals("auth:password"))
				{
					password = toString(data.Value.Value);
				}
					
				else if(name.Equals("auth:salt"))
				{
					salt = toString(data.Value.Value);
				}
					
				else if(name.Equals("auth:enabled"))
				{
					enabled = toBool(data.Value.Value);
				}
					
				else if(name.Equals("info:firstName"))
				{
					firstName = toString(data.Value.Value);
				}
					
				else if(name.Equals("info:lastName"))
				{
					lastName = toString(data.Value.Value);
				}
					
				else if(name.Equals("info:email"))
				{
					email = toString(data.Value.Value);
					email_Original = toString(data.Value.Value);
				}
					
				else if(colName[0].Equals("roles"))
				{
					roles.Columns.Add(colName[1], toString(data.Value.Value));
				}

			}
		}
			
		public void loadAuth()
		{
			byte[] data;

			//Get the value from the database
			data = connection.getCell(tableNameBytes, rowIDBytes, fromString("auth:password")).Value;
			password = toString(data);

			//Get the value from the database
			data = connection.getCell(tableNameBytes, rowIDBytes, fromString("auth:salt")).Value;
			salt = toString(data);

			//Get the value from the database
			data = connection.getCell(tableNameBytes, rowIDBytes, fromString("auth:enabled")).Value;
			enabled = toBool(data);
		}
		
		public void loadInfo()
		{
			byte[] data;

			//Get the value from the database
			data = connection.getCell(tableNameBytes, rowIDBytes, fromString("info:firstName")).Value;
			firstName = toString(data);

			//Get the value from the database
			data = connection.getCell(tableNameBytes, rowIDBytes, fromString("info:lastName")).Value;
			lastName = toString(data);

			//Get the value from the database
			data = connection.getCell(tableNameBytes, rowIDBytes, fromString("info:email")).Value;
			email = toString(data);
		}
		
		public override void save()
		{
			//Holds all the value changes
			OHMRowMutation changes = new OHMRowMutation(rowIDBytes);
		
			if(password_Changed)
			{
				//Create the new cell
				OHMCell cell = new OHMCell(fromString(password));
				
				//Add the update
				changes.addUpdate(fromString("auth:password"), cell);

				//Update the changed flag
				password_Changed = false;
				
			}
			
			if(salt_Changed)
			{
				//Create the new cell
				OHMCell cell = new OHMCell(fromString(salt));
				
				//Add the update
				changes.addUpdate(fromString("auth:salt"), cell);

				//Update the changed flag
				salt_Changed = false;
				
			}
			
			if(enabled_Changed)
			{
				//Create the new cell
				OHMCell cell = new OHMCell(fromBool(enabled));
				
				//Add the update
				changes.addUpdate(fromString("auth:enabled"), cell);

				//Update the changed flag
				enabled_Changed = false;
				
			}
			
			if(firstName_Changed)
			{
				//Create the new cell
				OHMCell cell = new OHMCell(fromString(firstName));
				
				//Add the update
				changes.addUpdate(fromString("info:firstName"), cell);

				//Update the changed flag
				firstName_Changed = false;
				
			}
			
			if(lastName_Changed)
			{
				//Create the new cell
				OHMCell cell = new OHMCell(fromString(lastName));
				
				//Add the update
				changes.addUpdate(fromString("info:lastName"), cell);

				//Update the changed flag
				lastName_Changed = false;
				
			}
			
			if(email_Changed)
			{
				//Create the new cell
				OHMCell cell = new OHMCell(fromString(email));
				
				//Add the update
				changes.addUpdate(fromString("info:email"), cell);

				//Update the changed flag
				email_Changed = false;
				
				byte[] indexTable = fromString("usersByEmail");
				
				//Create the index mutation
				OHMRowMutation indexMutation = new OHMRowMutation(fromString(email));

				//Create the new cell
				OHMCell indexCell = new OHMCell(rowIDBytes);

				//Add the update
				indexMutation.addUpdate(fromString("index:id"), indexCell);
				
				//Update the index
				connection.deleteRow(indexTable, fromString(email_Original));
				connection.batchRowMutation(indexTable, indexMutation);
			}
			
			//Update Dynamic Columns
			foreach(String colName in roles.DeletedColumns)
			{
				//Add the column to delete
				changes.addDelete(fromString("roles:" + colName));
			}

			foreach(String colName in roles.UpdatedColumns)
			{
				//Create the new cell
				OHMCell cell =  new OHMCell(fromString(roles.Columns[colName]));
				
				//Add the update
				changes.addUpdate(fromString("roles:" + colName), cell);
			}
			
			roles.clearPendingUpdates();
			//Send all the value updates to the db
			connection.batchRowMutation(tableNameBytes, changes);
		}
		
		//Field Accessor Properties
		public virtual String UserID { get { return userID; } }
		
		public virtual String Password { get { return password; } set { password = value; password_Changed = true; } }	
		public virtual String Salt { get { return salt; } set { salt = value; salt_Changed = true; } }	
		public virtual bool Enabled { get { return enabled; } set { enabled = value; enabled_Changed = true; } }	

		public virtual String FirstName { get { return firstName; } set { firstName = value; firstName_Changed = true; } }	
		public virtual String LastName { get { return lastName; } set { lastName = value; lastName_Changed = true; } }	
		public virtual String Email { get { return email; } set { email = value; email_Changed = true; } }	

		public virtual DynamicColumnFamily<String> Roles { get { return roles; } }

	}
	
	public class UserScanner : BaseTableScanner
	{
		public UserScanner (OHMConnection connection) : base(connection, BaseTable.fromString("users"))
		{
		}
		
		public void open(String key)
		{
			base.open(BaseTable.fromString(key));
		}
		
		public void open(String key, List<String> colNames)
		{
			base.open(BaseTable.fromString(key), colNames);
		}
		
		public void openWithStop(String startKey, String stopKey)
		{
			base.openWithStop(BaseTable.fromString(startKey), BaseTable.fromString(stopKey));
		}
		
		public void openWithStop(String startKey, String stopKey, List<String> colNames)
		{
			base.openWithStop(BaseTable.fromString(startKey), BaseTable.fromString(stopKey), colNames);
		}
		
		public bool tryGetNext(out User row)
		{
			OHMRow result = null;

			if(base.tryGetNext(out result))
			{
				row = new User(connection, BaseTable.toString(result.RowID));
				row.loadFromData(result);
				
				return true;
			}
			else
			{
				//Set a default value
				row = null;

				return false;
			}
		}		
	}
}