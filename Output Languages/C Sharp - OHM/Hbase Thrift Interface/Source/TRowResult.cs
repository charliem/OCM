/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using Thrift;
using Thrift.Protocol;
using Thrift.Transport;
namespace Apache.Hadoop.Hbase.Thrift
{
  public class TRowResult 
  {
    public byte[] row;
    public Dictionary<byte[], TCell> columns;

    public Isset __isset;
    public struct Isset {
      public bool row;
      public bool columns;
    }

    public TRowResult() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.row = iprot.ReadBinary();
              this.__isset.row = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                this.columns = new Dictionary<byte[], TCell>();
                TMap _map4 = iprot.ReadMapBegin();
                for( int _i5 = 0; _i5 < _map4.Count; ++_i5)
                {
                  byte[] _key6;
                  TCell _val7;
                  _key6 = iprot.ReadBinary();
                  _val7 = new TCell();
                  _val7.Read(iprot);
                  this.columns[_key6] = _val7;
                }
                iprot.ReadMapEnd();
              }
              this.__isset.columns = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TRowResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.row != null) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(this.row);
        oprot.WriteFieldEnd();
      }
      if (this.columns != null) {
        field.Name = "columns";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, this.columns.Count));
          foreach (byte[] _iter8 in this.columns.Keys)
          {
            oprot.WriteBinary(_iter8);
            this.columns[_iter8].Write(oprot);
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TRowResult(");
      sb.Append("row: ");
      sb.Append(this.row);
      sb.Append(",columns: ");
      sb.Append(this.columns);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
