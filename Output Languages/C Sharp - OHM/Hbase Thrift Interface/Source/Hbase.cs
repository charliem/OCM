/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using Thrift;
using Thrift.Protocol;
using Thrift.Transport;
namespace Apache.Hadoop.Hbase.Thrift
{
  public class Hbase {
    public interface Iface {
      void enableTable(byte[] tableName);
      void disableTable(byte[] tableName);
      bool isTableEnabled(byte[] tableName);
      List<byte[]> getTableNames();
      Dictionary<byte[], ColumnDescriptor> getColumnDescriptors(byte[] tableName);
      List<TRegionInfo> getTableRegions(byte[] tableName);
      void createTable(byte[] tableName, List<ColumnDescriptor> columnFamilies);
      void deleteTable(byte[] tableName);
      TCell get(byte[] tableName, byte[] row, byte[] column);
      List<TCell> getVer(byte[] tableName, byte[] row, byte[] column, int numVersions);
      List<TCell> getVerTs(byte[] tableName, byte[] row, byte[] column, long timestamp, int numVersions);
      TRowResult getRow(byte[] tableName, byte[] row);
      TRowResult getRowTs(byte[] tableName, byte[] row, long timestamp);
      void mutateRow(byte[] tableName, byte[] row, List<Mutation> mutations);
      void mutateRowTs(byte[] tableName, byte[] row, List<Mutation> mutations, long timestamp);
      void mutateRows(byte[] tableName, List<BatchMutation> rowBatches);
      void mutateRowsTs(byte[] tableName, List<BatchMutation> rowBatches, long timestamp);
      void deleteAll(byte[] tableName, byte[] row, byte[] column);
      void deleteAllTs(byte[] tableName, byte[] row, byte[] column, long timestamp);
      void deleteAllRow(byte[] tableName, byte[] row);
      void deleteAllRowTs(byte[] tableName, byte[] row, long timestamp);
      int scannerOpen(byte[] tableName, byte[] startRow, List<byte[]> columns);
      int scannerOpenWithStop(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns);
      int scannerOpenTs(byte[] tableName, byte[] startRow, List<byte[]> columns, long timestamp);
      int scannerOpenWithStopTs(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns, long timestamp);
      TRowResult scannerGet(int id);
      void scannerClose(int id);
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public void enableTable(byte[] tableName)
      {
        send_enableTable(tableName);
        recv_enableTable();
      }

      public void send_enableTable(byte[] tableName)
      {
        oprot_.WriteMessageBegin(new TMessage("enableTable", TMessageType.Call, seqid_));
        enableTable_args args = new enableTable_args();
        args.tableName = tableName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_enableTable()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        enableTable_result result = new enableTable_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.io;
        }
        return;
      }

      public void disableTable(byte[] tableName)
      {
        send_disableTable(tableName);
        recv_disableTable();
      }

      public void send_disableTable(byte[] tableName)
      {
        oprot_.WriteMessageBegin(new TMessage("disableTable", TMessageType.Call, seqid_));
        disableTable_args args = new disableTable_args();
        args.tableName = tableName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_disableTable()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        disableTable_result result = new disableTable_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.io;
        }
        return;
      }

      public bool isTableEnabled(byte[] tableName)
      {
        send_isTableEnabled(tableName);
        return recv_isTableEnabled();
      }

      public void send_isTableEnabled(byte[] tableName)
      {
        oprot_.WriteMessageBegin(new TMessage("isTableEnabled", TMessageType.Call, seqid_));
        isTableEnabled_args args = new isTableEnabled_args();
        args.tableName = tableName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public bool recv_isTableEnabled()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        isTableEnabled_result result = new isTableEnabled_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.io) {
          throw result.io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isTableEnabled failed: unknown result");
      }

      public List<byte[]> getTableNames()
      {
        send_getTableNames();
        return recv_getTableNames();
      }

      public void send_getTableNames()
      {
        oprot_.WriteMessageBegin(new TMessage("getTableNames", TMessageType.Call, seqid_));
        getTableNames_args args = new getTableNames_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<byte[]> recv_getTableNames()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTableNames_result result = new getTableNames_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.io) {
          throw result.io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTableNames failed: unknown result");
      }

      public Dictionary<byte[], ColumnDescriptor> getColumnDescriptors(byte[] tableName)
      {
        send_getColumnDescriptors(tableName);
        return recv_getColumnDescriptors();
      }

      public void send_getColumnDescriptors(byte[] tableName)
      {
        oprot_.WriteMessageBegin(new TMessage("getColumnDescriptors", TMessageType.Call, seqid_));
        getColumnDescriptors_args args = new getColumnDescriptors_args();
        args.tableName = tableName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Dictionary<byte[], ColumnDescriptor> recv_getColumnDescriptors()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getColumnDescriptors_result result = new getColumnDescriptors_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.io) {
          throw result.io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getColumnDescriptors failed: unknown result");
      }

      public List<TRegionInfo> getTableRegions(byte[] tableName)
      {
        send_getTableRegions(tableName);
        return recv_getTableRegions();
      }

      public void send_getTableRegions(byte[] tableName)
      {
        oprot_.WriteMessageBegin(new TMessage("getTableRegions", TMessageType.Call, seqid_));
        getTableRegions_args args = new getTableRegions_args();
        args.tableName = tableName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TRegionInfo> recv_getTableRegions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTableRegions_result result = new getTableRegions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.io) {
          throw result.io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTableRegions failed: unknown result");
      }

      public void createTable(byte[] tableName, List<ColumnDescriptor> columnFamilies)
      {
        send_createTable(tableName, columnFamilies);
        recv_createTable();
      }

      public void send_createTable(byte[] tableName, List<ColumnDescriptor> columnFamilies)
      {
        oprot_.WriteMessageBegin(new TMessage("createTable", TMessageType.Call, seqid_));
        createTable_args args = new createTable_args();
        args.tableName = tableName;
        args.columnFamilies = columnFamilies;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_createTable()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createTable_result result = new createTable_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.io;
        }
        if (result.__isset.ia) {
          throw result.ia;
        }
        if (result.__isset.exist) {
          throw result.exist;
        }
        return;
      }

      public void deleteTable(byte[] tableName)
      {
        send_deleteTable(tableName);
        recv_deleteTable();
      }

      public void send_deleteTable(byte[] tableName)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteTable", TMessageType.Call, seqid_));
        deleteTable_args args = new deleteTable_args();
        args.tableName = tableName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_deleteTable()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteTable_result result = new deleteTable_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.io;
        }
        if (result.__isset.nf) {
          throw result.nf;
        }
        return;
      }

      public TCell get(byte[] tableName, byte[] row, byte[] column)
      {
        send_get(tableName, row, column);
        return recv_get();
      }

      public void send_get(byte[] tableName, byte[] row, byte[] column)
      {
        oprot_.WriteMessageBegin(new TMessage("get", TMessageType.Call, seqid_));
        get_args args = new get_args();
        args.tableName = tableName;
        args.row = row;
        args.column = column;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public TCell recv_get()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_result result = new get_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.io) {
          throw result.io;
        }
        if (result.__isset.nf) {
          throw result.nf;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get failed: unknown result");
      }

      public List<TCell> getVer(byte[] tableName, byte[] row, byte[] column, int numVersions)
      {
        send_getVer(tableName, row, column, numVersions);
        return recv_getVer();
      }

      public void send_getVer(byte[] tableName, byte[] row, byte[] column, int numVersions)
      {
        oprot_.WriteMessageBegin(new TMessage("getVer", TMessageType.Call, seqid_));
        getVer_args args = new getVer_args();
        args.tableName = tableName;
        args.row = row;
        args.column = column;
        args.numVersions = numVersions;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TCell> recv_getVer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getVer_result result = new getVer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.io) {
          throw result.io;
        }
        if (result.__isset.nf) {
          throw result.nf;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getVer failed: unknown result");
      }

      public List<TCell> getVerTs(byte[] tableName, byte[] row, byte[] column, long timestamp, int numVersions)
      {
        send_getVerTs(tableName, row, column, timestamp, numVersions);
        return recv_getVerTs();
      }

      public void send_getVerTs(byte[] tableName, byte[] row, byte[] column, long timestamp, int numVersions)
      {
        oprot_.WriteMessageBegin(new TMessage("getVerTs", TMessageType.Call, seqid_));
        getVerTs_args args = new getVerTs_args();
        args.tableName = tableName;
        args.row = row;
        args.column = column;
        args.timestamp = timestamp;
        args.numVersions = numVersions;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TCell> recv_getVerTs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getVerTs_result result = new getVerTs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.io) {
          throw result.io;
        }
        if (result.__isset.nf) {
          throw result.nf;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getVerTs failed: unknown result");
      }

      public TRowResult getRow(byte[] tableName, byte[] row)
      {
        send_getRow(tableName, row);
        return recv_getRow();
      }

      public void send_getRow(byte[] tableName, byte[] row)
      {
        oprot_.WriteMessageBegin(new TMessage("getRow", TMessageType.Call, seqid_));
        getRow_args args = new getRow_args();
        args.tableName = tableName;
        args.row = row;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public TRowResult recv_getRow()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRow_result result = new getRow_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.io) {
          throw result.io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRow failed: unknown result");
      }

      public TRowResult getRowTs(byte[] tableName, byte[] row, long timestamp)
      {
        send_getRowTs(tableName, row, timestamp);
        return recv_getRowTs();
      }

      public void send_getRowTs(byte[] tableName, byte[] row, long timestamp)
      {
        oprot_.WriteMessageBegin(new TMessage("getRowTs", TMessageType.Call, seqid_));
        getRowTs_args args = new getRowTs_args();
        args.tableName = tableName;
        args.row = row;
        args.timestamp = timestamp;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public TRowResult recv_getRowTs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRowTs_result result = new getRowTs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.io) {
          throw result.io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRowTs failed: unknown result");
      }

      public void mutateRow(byte[] tableName, byte[] row, List<Mutation> mutations)
      {
        send_mutateRow(tableName, row, mutations);
        recv_mutateRow();
      }

      public void send_mutateRow(byte[] tableName, byte[] row, List<Mutation> mutations)
      {
        oprot_.WriteMessageBegin(new TMessage("mutateRow", TMessageType.Call, seqid_));
        mutateRow_args args = new mutateRow_args();
        args.tableName = tableName;
        args.row = row;
        args.mutations = mutations;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_mutateRow()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutateRow_result result = new mutateRow_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.io;
        }
        if (result.__isset.ia) {
          throw result.ia;
        }
        return;
      }

      public void mutateRowTs(byte[] tableName, byte[] row, List<Mutation> mutations, long timestamp)
      {
        send_mutateRowTs(tableName, row, mutations, timestamp);
        recv_mutateRowTs();
      }

      public void send_mutateRowTs(byte[] tableName, byte[] row, List<Mutation> mutations, long timestamp)
      {
        oprot_.WriteMessageBegin(new TMessage("mutateRowTs", TMessageType.Call, seqid_));
        mutateRowTs_args args = new mutateRowTs_args();
        args.tableName = tableName;
        args.row = row;
        args.mutations = mutations;
        args.timestamp = timestamp;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_mutateRowTs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutateRowTs_result result = new mutateRowTs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.io;
        }
        if (result.__isset.ia) {
          throw result.ia;
        }
        return;
      }

      public void mutateRows(byte[] tableName, List<BatchMutation> rowBatches)
      {
        send_mutateRows(tableName, rowBatches);
        recv_mutateRows();
      }

      public void send_mutateRows(byte[] tableName, List<BatchMutation> rowBatches)
      {
        oprot_.WriteMessageBegin(new TMessage("mutateRows", TMessageType.Call, seqid_));
        mutateRows_args args = new mutateRows_args();
        args.tableName = tableName;
        args.rowBatches = rowBatches;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_mutateRows()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutateRows_result result = new mutateRows_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.io;
        }
        if (result.__isset.ia) {
          throw result.ia;
        }
        return;
      }

      public void mutateRowsTs(byte[] tableName, List<BatchMutation> rowBatches, long timestamp)
      {
        send_mutateRowsTs(tableName, rowBatches, timestamp);
        recv_mutateRowsTs();
      }

      public void send_mutateRowsTs(byte[] tableName, List<BatchMutation> rowBatches, long timestamp)
      {
        oprot_.WriteMessageBegin(new TMessage("mutateRowsTs", TMessageType.Call, seqid_));
        mutateRowsTs_args args = new mutateRowsTs_args();
        args.tableName = tableName;
        args.rowBatches = rowBatches;
        args.timestamp = timestamp;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_mutateRowsTs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        mutateRowsTs_result result = new mutateRowsTs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.io;
        }
        if (result.__isset.ia) {
          throw result.ia;
        }
        return;
      }

      public void deleteAll(byte[] tableName, byte[] row, byte[] column)
      {
        send_deleteAll(tableName, row, column);
        recv_deleteAll();
      }

      public void send_deleteAll(byte[] tableName, byte[] row, byte[] column)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteAll", TMessageType.Call, seqid_));
        deleteAll_args args = new deleteAll_args();
        args.tableName = tableName;
        args.row = row;
        args.column = column;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_deleteAll()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteAll_result result = new deleteAll_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.io;
        }
        return;
      }

      public void deleteAllTs(byte[] tableName, byte[] row, byte[] column, long timestamp)
      {
        send_deleteAllTs(tableName, row, column, timestamp);
        recv_deleteAllTs();
      }

      public void send_deleteAllTs(byte[] tableName, byte[] row, byte[] column, long timestamp)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteAllTs", TMessageType.Call, seqid_));
        deleteAllTs_args args = new deleteAllTs_args();
        args.tableName = tableName;
        args.row = row;
        args.column = column;
        args.timestamp = timestamp;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_deleteAllTs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteAllTs_result result = new deleteAllTs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.io;
        }
        return;
      }

      public void deleteAllRow(byte[] tableName, byte[] row)
      {
        send_deleteAllRow(tableName, row);
        recv_deleteAllRow();
      }

      public void send_deleteAllRow(byte[] tableName, byte[] row)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteAllRow", TMessageType.Call, seqid_));
        deleteAllRow_args args = new deleteAllRow_args();
        args.tableName = tableName;
        args.row = row;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_deleteAllRow()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteAllRow_result result = new deleteAllRow_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.io;
        }
        return;
      }

      public void deleteAllRowTs(byte[] tableName, byte[] row, long timestamp)
      {
        send_deleteAllRowTs(tableName, row, timestamp);
        recv_deleteAllRowTs();
      }

      public void send_deleteAllRowTs(byte[] tableName, byte[] row, long timestamp)
      {
        oprot_.WriteMessageBegin(new TMessage("deleteAllRowTs", TMessageType.Call, seqid_));
        deleteAllRowTs_args args = new deleteAllRowTs_args();
        args.tableName = tableName;
        args.row = row;
        args.timestamp = timestamp;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_deleteAllRowTs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deleteAllRowTs_result result = new deleteAllRowTs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.io;
        }
        return;
      }

      public int scannerOpen(byte[] tableName, byte[] startRow, List<byte[]> columns)
      {
        send_scannerOpen(tableName, startRow, columns);
        return recv_scannerOpen();
      }

      public void send_scannerOpen(byte[] tableName, byte[] startRow, List<byte[]> columns)
      {
        oprot_.WriteMessageBegin(new TMessage("scannerOpen", TMessageType.Call, seqid_));
        scannerOpen_args args = new scannerOpen_args();
        args.tableName = tableName;
        args.startRow = startRow;
        args.columns = columns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_scannerOpen()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scannerOpen_result result = new scannerOpen_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.io) {
          throw result.io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerOpen failed: unknown result");
      }

      public int scannerOpenWithStop(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns)
      {
        send_scannerOpenWithStop(tableName, startRow, stopRow, columns);
        return recv_scannerOpenWithStop();
      }

      public void send_scannerOpenWithStop(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns)
      {
        oprot_.WriteMessageBegin(new TMessage("scannerOpenWithStop", TMessageType.Call, seqid_));
        scannerOpenWithStop_args args = new scannerOpenWithStop_args();
        args.tableName = tableName;
        args.startRow = startRow;
        args.stopRow = stopRow;
        args.columns = columns;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_scannerOpenWithStop()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scannerOpenWithStop_result result = new scannerOpenWithStop_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.io) {
          throw result.io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerOpenWithStop failed: unknown result");
      }

      public int scannerOpenTs(byte[] tableName, byte[] startRow, List<byte[]> columns, long timestamp)
      {
        send_scannerOpenTs(tableName, startRow, columns, timestamp);
        return recv_scannerOpenTs();
      }

      public void send_scannerOpenTs(byte[] tableName, byte[] startRow, List<byte[]> columns, long timestamp)
      {
        oprot_.WriteMessageBegin(new TMessage("scannerOpenTs", TMessageType.Call, seqid_));
        scannerOpenTs_args args = new scannerOpenTs_args();
        args.tableName = tableName;
        args.startRow = startRow;
        args.columns = columns;
        args.timestamp = timestamp;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_scannerOpenTs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scannerOpenTs_result result = new scannerOpenTs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.io) {
          throw result.io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerOpenTs failed: unknown result");
      }

      public int scannerOpenWithStopTs(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns, long timestamp)
      {
        send_scannerOpenWithStopTs(tableName, startRow, stopRow, columns, timestamp);
        return recv_scannerOpenWithStopTs();
      }

      public void send_scannerOpenWithStopTs(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns, long timestamp)
      {
        oprot_.WriteMessageBegin(new TMessage("scannerOpenWithStopTs", TMessageType.Call, seqid_));
        scannerOpenWithStopTs_args args = new scannerOpenWithStopTs_args();
        args.tableName = tableName;
        args.startRow = startRow;
        args.stopRow = stopRow;
        args.columns = columns;
        args.timestamp = timestamp;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_scannerOpenWithStopTs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scannerOpenWithStopTs_result result = new scannerOpenWithStopTs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.io) {
          throw result.io;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerOpenWithStopTs failed: unknown result");
      }

      public TRowResult scannerGet(int id)
      {
        send_scannerGet(id);
        return recv_scannerGet();
      }

      public void send_scannerGet(int id)
      {
        oprot_.WriteMessageBegin(new TMessage("scannerGet", TMessageType.Call, seqid_));
        scannerGet_args args = new scannerGet_args();
        args.id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public TRowResult recv_scannerGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scannerGet_result result = new scannerGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.success;
        }
        if (result.__isset.io) {
          throw result.io;
        }
        if (result.__isset.ia) {
          throw result.ia;
        }
        if (result.__isset.nf) {
          throw result.nf;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerGet failed: unknown result");
      }

      public void scannerClose(int id)
      {
        send_scannerClose(id);
        recv_scannerClose();
      }

      public void send_scannerClose(int id)
      {
        oprot_.WriteMessageBegin(new TMessage("scannerClose", TMessageType.Call, seqid_));
        scannerClose_args args = new scannerClose_args();
        args.id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_scannerClose()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        scannerClose_result result = new scannerClose_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.io) {
          throw result.io;
        }
        if (result.__isset.ia) {
          throw result.ia;
        }
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["enableTable"] = enableTable_Process;
        processMap_["disableTable"] = disableTable_Process;
        processMap_["isTableEnabled"] = isTableEnabled_Process;
        processMap_["getTableNames"] = getTableNames_Process;
        processMap_["getColumnDescriptors"] = getColumnDescriptors_Process;
        processMap_["getTableRegions"] = getTableRegions_Process;
        processMap_["createTable"] = createTable_Process;
        processMap_["deleteTable"] = deleteTable_Process;
        processMap_["get"] = get_Process;
        processMap_["getVer"] = getVer_Process;
        processMap_["getVerTs"] = getVerTs_Process;
        processMap_["getRow"] = getRow_Process;
        processMap_["getRowTs"] = getRowTs_Process;
        processMap_["mutateRow"] = mutateRow_Process;
        processMap_["mutateRowTs"] = mutateRowTs_Process;
        processMap_["mutateRows"] = mutateRows_Process;
        processMap_["mutateRowsTs"] = mutateRowsTs_Process;
        processMap_["deleteAll"] = deleteAll_Process;
        processMap_["deleteAllTs"] = deleteAllTs_Process;
        processMap_["deleteAllRow"] = deleteAllRow_Process;
        processMap_["deleteAllRowTs"] = deleteAllRowTs_Process;
        processMap_["scannerOpen"] = scannerOpen_Process;
        processMap_["scannerOpenWithStop"] = scannerOpenWithStop_Process;
        processMap_["scannerOpenTs"] = scannerOpenTs_Process;
        processMap_["scannerOpenWithStopTs"] = scannerOpenWithStopTs_Process;
        processMap_["scannerGet"] = scannerGet_Process;
        processMap_["scannerClose"] = scannerClose_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn = processMap_[msg.Name];
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
        return true;
      }

      public void enableTable_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        enableTable_args args = new enableTable_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        enableTable_result result = new enableTable_result();
        try {
          iface_.enableTable(args.tableName);
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("enableTable", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void disableTable_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        disableTable_args args = new disableTable_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        disableTable_result result = new disableTable_result();
        try {
          iface_.disableTable(args.tableName);
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("disableTable", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void isTableEnabled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        isTableEnabled_args args = new isTableEnabled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        isTableEnabled_result result = new isTableEnabled_result();
        try {
          result.success = iface_.isTableEnabled(args.tableName);
          result.__isset.success = true;
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("isTableEnabled", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTableNames_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTableNames_args args = new getTableNames_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTableNames_result result = new getTableNames_result();
        try {
          result.success = iface_.getTableNames();
          result.__isset.success = true;
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("getTableNames", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getColumnDescriptors_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getColumnDescriptors_args args = new getColumnDescriptors_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getColumnDescriptors_result result = new getColumnDescriptors_result();
        try {
          result.success = iface_.getColumnDescriptors(args.tableName);
          result.__isset.success = true;
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("getColumnDescriptors", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTableRegions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTableRegions_args args = new getTableRegions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTableRegions_result result = new getTableRegions_result();
        try {
          result.success = iface_.getTableRegions(args.tableName);
          result.__isset.success = true;
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("getTableRegions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createTable_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createTable_args args = new createTable_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createTable_result result = new createTable_result();
        try {
          iface_.createTable(args.tableName, args.columnFamilies);
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        } catch (IllegalArgument ia) {
          result.ia = ia;
          result.__isset.ia = true;
        } catch (AlreadyExists exist) {
          result.exist = exist;
          result.__isset.exist = true;
        }
        oprot.WriteMessageBegin(new TMessage("createTable", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteTable_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteTable_args args = new deleteTable_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteTable_result result = new deleteTable_result();
        try {
          iface_.deleteTable(args.tableName);
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        } catch (NotFound nf) {
          result.nf = nf;
          result.__isset.nf = true;
        }
        oprot.WriteMessageBegin(new TMessage("deleteTable", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_args args = new get_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_result result = new get_result();
        try {
          result.success = iface_.get(args.tableName, args.row, args.column);
          result.__isset.success = true;
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        } catch (NotFound nf) {
          result.nf = nf;
          result.__isset.nf = true;
        }
        oprot.WriteMessageBegin(new TMessage("get", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getVer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getVer_args args = new getVer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getVer_result result = new getVer_result();
        try {
          result.success = iface_.getVer(args.tableName, args.row, args.column, args.numVersions);
          result.__isset.success = true;
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        } catch (NotFound nf) {
          result.nf = nf;
          result.__isset.nf = true;
        }
        oprot.WriteMessageBegin(new TMessage("getVer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getVerTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getVerTs_args args = new getVerTs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getVerTs_result result = new getVerTs_result();
        try {
          result.success = iface_.getVerTs(args.tableName, args.row, args.column, args.timestamp, args.numVersions);
          result.__isset.success = true;
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        } catch (NotFound nf) {
          result.nf = nf;
          result.__isset.nf = true;
        }
        oprot.WriteMessageBegin(new TMessage("getVerTs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRow_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRow_args args = new getRow_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRow_result result = new getRow_result();
        try {
          result.success = iface_.getRow(args.tableName, args.row);
          result.__isset.success = true;
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("getRow", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRowTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRowTs_args args = new getRowTs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRowTs_result result = new getRowTs_result();
        try {
          result.success = iface_.getRowTs(args.tableName, args.row, args.timestamp);
          result.__isset.success = true;
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("getRowTs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutateRow_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutateRow_args args = new mutateRow_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutateRow_result result = new mutateRow_result();
        try {
          iface_.mutateRow(args.tableName, args.row, args.mutations);
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        } catch (IllegalArgument ia) {
          result.ia = ia;
          result.__isset.ia = true;
        }
        oprot.WriteMessageBegin(new TMessage("mutateRow", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutateRowTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutateRowTs_args args = new mutateRowTs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutateRowTs_result result = new mutateRowTs_result();
        try {
          iface_.mutateRowTs(args.tableName, args.row, args.mutations, args.timestamp);
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        } catch (IllegalArgument ia) {
          result.ia = ia;
          result.__isset.ia = true;
        }
        oprot.WriteMessageBegin(new TMessage("mutateRowTs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutateRows_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutateRows_args args = new mutateRows_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutateRows_result result = new mutateRows_result();
        try {
          iface_.mutateRows(args.tableName, args.rowBatches);
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        } catch (IllegalArgument ia) {
          result.ia = ia;
          result.__isset.ia = true;
        }
        oprot.WriteMessageBegin(new TMessage("mutateRows", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void mutateRowsTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        mutateRowsTs_args args = new mutateRowsTs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        mutateRowsTs_result result = new mutateRowsTs_result();
        try {
          iface_.mutateRowsTs(args.tableName, args.rowBatches, args.timestamp);
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        } catch (IllegalArgument ia) {
          result.ia = ia;
          result.__isset.ia = true;
        }
        oprot.WriteMessageBegin(new TMessage("mutateRowsTs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteAll_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteAll_args args = new deleteAll_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteAll_result result = new deleteAll_result();
        try {
          iface_.deleteAll(args.tableName, args.row, args.column);
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("deleteAll", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteAllTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteAllTs_args args = new deleteAllTs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteAllTs_result result = new deleteAllTs_result();
        try {
          iface_.deleteAllTs(args.tableName, args.row, args.column, args.timestamp);
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("deleteAllTs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteAllRow_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteAllRow_args args = new deleteAllRow_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteAllRow_result result = new deleteAllRow_result();
        try {
          iface_.deleteAllRow(args.tableName, args.row);
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("deleteAllRow", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deleteAllRowTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deleteAllRowTs_args args = new deleteAllRowTs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deleteAllRowTs_result result = new deleteAllRowTs_result();
        try {
          iface_.deleteAllRowTs(args.tableName, args.row, args.timestamp);
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("deleteAllRowTs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scannerOpen_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scannerOpen_args args = new scannerOpen_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scannerOpen_result result = new scannerOpen_result();
        try {
          result.success = iface_.scannerOpen(args.tableName, args.startRow, args.columns);
          result.__isset.success = true;
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("scannerOpen", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scannerOpenWithStop_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scannerOpenWithStop_args args = new scannerOpenWithStop_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scannerOpenWithStop_result result = new scannerOpenWithStop_result();
        try {
          result.success = iface_.scannerOpenWithStop(args.tableName, args.startRow, args.stopRow, args.columns);
          result.__isset.success = true;
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("scannerOpenWithStop", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scannerOpenTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scannerOpenTs_args args = new scannerOpenTs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scannerOpenTs_result result = new scannerOpenTs_result();
        try {
          result.success = iface_.scannerOpenTs(args.tableName, args.startRow, args.columns, args.timestamp);
          result.__isset.success = true;
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("scannerOpenTs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scannerOpenWithStopTs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scannerOpenWithStopTs_args args = new scannerOpenWithStopTs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scannerOpenWithStopTs_result result = new scannerOpenWithStopTs_result();
        try {
          result.success = iface_.scannerOpenWithStopTs(args.tableName, args.startRow, args.stopRow, args.columns, args.timestamp);
          result.__isset.success = true;
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        }
        oprot.WriteMessageBegin(new TMessage("scannerOpenWithStopTs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scannerGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scannerGet_args args = new scannerGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scannerGet_result result = new scannerGet_result();
        try {
          result.success = iface_.scannerGet(args.id);
          result.__isset.success = true;
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        } catch (IllegalArgument ia) {
          result.ia = ia;
          result.__isset.ia = true;
        } catch (NotFound nf) {
          result.nf = nf;
          result.__isset.nf = true;
        }
        oprot.WriteMessageBegin(new TMessage("scannerGet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void scannerClose_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        scannerClose_args args = new scannerClose_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        scannerClose_result result = new scannerClose_result();
        try {
          iface_.scannerClose(args.id);
        } catch (IOError io) {
          result.io = io;
          result.__isset.io = true;
        } catch (IllegalArgument ia) {
          result.ia = ia;
          result.__isset.ia = true;
        }
        oprot.WriteMessageBegin(new TMessage("scannerClose", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }

    public class enableTable_args 
    {
      public byte[] tableName;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
      }

      public enableTable_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("enableTable_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("enableTable_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class enableTable_result 
    {
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool io;
      }

      public enableTable_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("enableTable_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("enableTable_result(");
        sb.Append("io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class disableTable_args 
    {
      public byte[] tableName;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
      }

      public disableTable_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("disableTable_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("disableTable_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class disableTable_result 
    {
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool io;
      }

      public disableTable_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("disableTable_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("disableTable_result(");
        sb.Append("io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class isTableEnabled_args 
    {
      public byte[] tableName;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
      }

      public isTableEnabled_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isTableEnabled_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isTableEnabled_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class isTableEnabled_result 
    {
      public bool success;
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool success;
        public bool io;
      }

      public isTableEnabled_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                this.success = iprot.ReadBool();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isTableEnabled_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isTableEnabled_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class getTableNames_args 
    {
      public getTableNames_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTableNames_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTableNames_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class getTableNames_result 
    {
      public List<byte[]> success;
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool success;
        public bool io;
      }

      public getTableNames_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<byte[]>();
                  TList _list9 = iprot.ReadListBegin();
                  for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                  {
                    byte[] _elem11 = null;
                    _elem11 = iprot.ReadBinary();
                    this.success.Add(_elem11);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTableNames_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, this.success.Count));
              foreach (byte[] _iter12 in this.success)
              {
                oprot.WriteBinary(_iter12);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTableNames_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class getColumnDescriptors_args 
    {
      public byte[] tableName;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
      }

      public getColumnDescriptors_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getColumnDescriptors_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getColumnDescriptors_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class getColumnDescriptors_result 
    {
      public Dictionary<byte[], ColumnDescriptor> success;
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool success;
        public bool io;
      }

      public getColumnDescriptors_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  this.success = new Dictionary<byte[], ColumnDescriptor>();
                  TMap _map13 = iprot.ReadMapBegin();
                  for( int _i14 = 0; _i14 < _map13.Count; ++_i14)
                  {
                    byte[] _key15;
                    ColumnDescriptor _val16;
                    _key15 = iprot.ReadBinary();
                    _val16 = new ColumnDescriptor();
                    _val16.Read(iprot);
                    this.success[_key15] = _val16;
                  }
                  iprot.ReadMapEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getColumnDescriptors_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, this.success.Count));
              foreach (byte[] _iter17 in this.success.Keys)
              {
                oprot.WriteBinary(_iter17);
                this.success[_iter17].Write(oprot);
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getColumnDescriptors_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class getTableRegions_args 
    {
      public byte[] tableName;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
      }

      public getTableRegions_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTableRegions_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTableRegions_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class getTableRegions_result 
    {
      public List<TRegionInfo> success;
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool success;
        public bool io;
      }

      public getTableRegions_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<TRegionInfo>();
                  TList _list18 = iprot.ReadListBegin();
                  for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                  {
                    TRegionInfo _elem20 = new TRegionInfo();
                    _elem20 = new TRegionInfo();
                    _elem20.Read(iprot);
                    this.success.Add(_elem20);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTableRegions_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (TRegionInfo _iter21 in this.success)
              {
                _iter21.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTableRegions_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class createTable_args 
    {
      public byte[] tableName;
      public List<ColumnDescriptor> columnFamilies;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool columnFamilies;
      }

      public createTable_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  this.columnFamilies = new List<ColumnDescriptor>();
                  TList _list22 = iprot.ReadListBegin();
                  for( int _i23 = 0; _i23 < _list22.Count; ++_i23)
                  {
                    ColumnDescriptor _elem24 = new ColumnDescriptor();
                    _elem24 = new ColumnDescriptor();
                    _elem24.Read(iprot);
                    this.columnFamilies.Add(_elem24);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.columnFamilies = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createTable_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.columnFamilies != null) {
          field.Name = "columnFamilies";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, this.columnFamilies.Count));
            foreach (ColumnDescriptor _iter25 in this.columnFamilies)
            {
              _iter25.Write(oprot);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createTable_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",columnFamilies: ");
        sb.Append(this.columnFamilies);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class createTable_result 
    {
      public IOError io;
      public IllegalArgument ia;
      public AlreadyExists exist;

      public Isset __isset;
      public struct Isset {
        public bool io;
        public bool ia;
        public bool exist;
      }

      public createTable_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ia = new IllegalArgument();
                this.ia.Read(iprot);
                this.__isset.ia = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.exist = new AlreadyExists();
                this.exist.Read(iprot);
                this.__isset.exist = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createTable_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ia) {
          if (this.ia != null) {
            field.Name = "ia";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ia.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.exist) {
          if (this.exist != null) {
            field.Name = "exist";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.exist.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("createTable_result(");
        sb.Append("io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(",ia: ");
        sb.Append(this.ia== null ? "<null>" : this.ia.ToString());
        sb.Append(",exist: ");
        sb.Append(this.exist== null ? "<null>" : this.exist.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class deleteTable_args 
    {
      public byte[] tableName;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
      }

      public deleteTable_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteTable_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteTable_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class deleteTable_result 
    {
      public IOError io;
      public NotFound nf;

      public Isset __isset;
      public struct Isset {
        public bool io;
        public bool nf;
      }

      public deleteTable_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.nf = new NotFound();
                this.nf.Read(iprot);
                this.__isset.nf = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteTable_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.nf) {
          if (this.nf != null) {
            field.Name = "nf";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.nf.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteTable_result(");
        sb.Append("io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(",nf: ");
        sb.Append(this.nf== null ? "<null>" : this.nf.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class get_args 
    {
      public byte[] tableName;
      public byte[] row;
      public byte[] column;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool row;
        public bool column;
      }

      public get_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.row = iprot.ReadBinary();
                this.__isset.row = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                this.column = iprot.ReadBinary();
                this.__isset.column = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.row != null) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.row);
          oprot.WriteFieldEnd();
        }
        if (this.column != null) {
          field.Name = "column";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.column);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",row: ");
        sb.Append(this.row);
        sb.Append(",column: ");
        sb.Append(this.column);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class get_result 
    {
      public TCell success;
      public IOError io;
      public NotFound nf;

      public Isset __isset;
      public struct Isset {
        public bool success;
        public bool io;
        public bool nf;
      }

      public get_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new TCell();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.nf = new NotFound();
                this.nf.Read(iprot);
                this.__isset.nf = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.nf) {
          if (this.nf != null) {
            field.Name = "nf";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.nf.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(",nf: ");
        sb.Append(this.nf== null ? "<null>" : this.nf.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class getVer_args 
    {
      public byte[] tableName;
      public byte[] row;
      public byte[] column;
      public int numVersions;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool row;
        public bool column;
        public bool numVersions;
      }

      public getVer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.row = iprot.ReadBinary();
                this.__isset.row = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                this.column = iprot.ReadBinary();
                this.__isset.column = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                this.numVersions = iprot.ReadI32();
                this.__isset.numVersions = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getVer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.row != null) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.row);
          oprot.WriteFieldEnd();
        }
        if (this.column != null) {
          field.Name = "column";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.column);
          oprot.WriteFieldEnd();
        }
        field.Name = "numVersions";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.numVersions);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getVer_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",row: ");
        sb.Append(this.row);
        sb.Append(",column: ");
        sb.Append(this.column);
        sb.Append(",numVersions: ");
        sb.Append(this.numVersions);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class getVer_result 
    {
      public List<TCell> success;
      public IOError io;
      public NotFound nf;

      public Isset __isset;
      public struct Isset {
        public bool success;
        public bool io;
        public bool nf;
      }

      public getVer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<TCell>();
                  TList _list26 = iprot.ReadListBegin();
                  for( int _i27 = 0; _i27 < _list26.Count; ++_i27)
                  {
                    TCell _elem28 = new TCell();
                    _elem28 = new TCell();
                    _elem28.Read(iprot);
                    this.success.Add(_elem28);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.nf = new NotFound();
                this.nf.Read(iprot);
                this.__isset.nf = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getVer_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (TCell _iter29 in this.success)
              {
                _iter29.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.nf) {
          if (this.nf != null) {
            field.Name = "nf";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.nf.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getVer_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(",nf: ");
        sb.Append(this.nf== null ? "<null>" : this.nf.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class getVerTs_args 
    {
      public byte[] tableName;
      public byte[] row;
      public byte[] column;
      public long timestamp;
      public int numVersions;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool row;
        public bool column;
        public bool timestamp;
        public bool numVersions;
      }

      public getVerTs_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.row = iprot.ReadBinary();
                this.__isset.row = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                this.column = iprot.ReadBinary();
                this.__isset.column = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                this.timestamp = iprot.ReadI64();
                this.__isset.timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                this.numVersions = iprot.ReadI32();
                this.__isset.numVersions = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getVerTs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.row != null) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.row);
          oprot.WriteFieldEnd();
        }
        if (this.column != null) {
          field.Name = "column";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.column);
          oprot.WriteFieldEnd();
        }
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.timestamp);
        oprot.WriteFieldEnd();
        field.Name = "numVersions";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.numVersions);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getVerTs_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",row: ");
        sb.Append(this.row);
        sb.Append(",column: ");
        sb.Append(this.column);
        sb.Append(",timestamp: ");
        sb.Append(this.timestamp);
        sb.Append(",numVersions: ");
        sb.Append(this.numVersions);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class getVerTs_result 
    {
      public List<TCell> success;
      public IOError io;
      public NotFound nf;

      public Isset __isset;
      public struct Isset {
        public bool success;
        public bool io;
        public bool nf;
      }

      public getVerTs_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<TCell>();
                  TList _list30 = iprot.ReadListBegin();
                  for( int _i31 = 0; _i31 < _list30.Count; ++_i31)
                  {
                    TCell _elem32 = new TCell();
                    _elem32 = new TCell();
                    _elem32.Read(iprot);
                    this.success.Add(_elem32);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.nf = new NotFound();
                this.nf.Read(iprot);
                this.__isset.nf = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getVerTs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (TCell _iter33 in this.success)
              {
                _iter33.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.nf) {
          if (this.nf != null) {
            field.Name = "nf";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.nf.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getVerTs_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(",nf: ");
        sb.Append(this.nf== null ? "<null>" : this.nf.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class getRow_args 
    {
      public byte[] tableName;
      public byte[] row;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool row;
      }

      public getRow_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.row = iprot.ReadBinary();
                this.__isset.row = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRow_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.row != null) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.row);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRow_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",row: ");
        sb.Append(this.row);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class getRow_result 
    {
      public TRowResult success;
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool success;
        public bool io;
      }

      public getRow_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new TRowResult();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRow_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRow_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class getRowTs_args 
    {
      public byte[] tableName;
      public byte[] row;
      public long timestamp;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool row;
        public bool timestamp;
      }

      public getRowTs_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.row = iprot.ReadBinary();
                this.__isset.row = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                this.timestamp = iprot.ReadI64();
                this.__isset.timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRowTs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.row != null) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.row);
          oprot.WriteFieldEnd();
        }
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.timestamp);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRowTs_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",row: ");
        sb.Append(this.row);
        sb.Append(",timestamp: ");
        sb.Append(this.timestamp);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class getRowTs_result 
    {
      public TRowResult success;
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool success;
        public bool io;
      }

      public getRowTs_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new TRowResult();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getRowTs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getRowTs_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class mutateRow_args 
    {
      public byte[] tableName;
      public byte[] row;
      public List<Mutation> mutations;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool row;
        public bool mutations;
      }

      public mutateRow_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.row = iprot.ReadBinary();
                this.__isset.row = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  this.mutations = new List<Mutation>();
                  TList _list34 = iprot.ReadListBegin();
                  for( int _i35 = 0; _i35 < _list34.Count; ++_i35)
                  {
                    Mutation _elem36 = new Mutation();
                    _elem36 = new Mutation();
                    _elem36.Read(iprot);
                    this.mutations.Add(_elem36);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.mutations = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutateRow_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.row != null) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.row);
          oprot.WriteFieldEnd();
        }
        if (this.mutations != null) {
          field.Name = "mutations";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, this.mutations.Count));
            foreach (Mutation _iter37 in this.mutations)
            {
              _iter37.Write(oprot);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutateRow_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",row: ");
        sb.Append(this.row);
        sb.Append(",mutations: ");
        sb.Append(this.mutations);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class mutateRow_result 
    {
      public IOError io;
      public IllegalArgument ia;

      public Isset __isset;
      public struct Isset {
        public bool io;
        public bool ia;
      }

      public mutateRow_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ia = new IllegalArgument();
                this.ia.Read(iprot);
                this.__isset.ia = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutateRow_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ia) {
          if (this.ia != null) {
            field.Name = "ia";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ia.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutateRow_result(");
        sb.Append("io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(",ia: ");
        sb.Append(this.ia== null ? "<null>" : this.ia.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class mutateRowTs_args 
    {
      public byte[] tableName;
      public byte[] row;
      public List<Mutation> mutations;
      public long timestamp;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool row;
        public bool mutations;
        public bool timestamp;
      }

      public mutateRowTs_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.row = iprot.ReadBinary();
                this.__isset.row = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  this.mutations = new List<Mutation>();
                  TList _list38 = iprot.ReadListBegin();
                  for( int _i39 = 0; _i39 < _list38.Count; ++_i39)
                  {
                    Mutation _elem40 = new Mutation();
                    _elem40 = new Mutation();
                    _elem40.Read(iprot);
                    this.mutations.Add(_elem40);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.mutations = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                this.timestamp = iprot.ReadI64();
                this.__isset.timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutateRowTs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.row != null) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.row);
          oprot.WriteFieldEnd();
        }
        if (this.mutations != null) {
          field.Name = "mutations";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, this.mutations.Count));
            foreach (Mutation _iter41 in this.mutations)
            {
              _iter41.Write(oprot);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.timestamp);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutateRowTs_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",row: ");
        sb.Append(this.row);
        sb.Append(",mutations: ");
        sb.Append(this.mutations);
        sb.Append(",timestamp: ");
        sb.Append(this.timestamp);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class mutateRowTs_result 
    {
      public IOError io;
      public IllegalArgument ia;

      public Isset __isset;
      public struct Isset {
        public bool io;
        public bool ia;
      }

      public mutateRowTs_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ia = new IllegalArgument();
                this.ia.Read(iprot);
                this.__isset.ia = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutateRowTs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ia) {
          if (this.ia != null) {
            field.Name = "ia";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ia.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutateRowTs_result(");
        sb.Append("io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(",ia: ");
        sb.Append(this.ia== null ? "<null>" : this.ia.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class mutateRows_args 
    {
      public byte[] tableName;
      public List<BatchMutation> rowBatches;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool rowBatches;
      }

      public mutateRows_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  this.rowBatches = new List<BatchMutation>();
                  TList _list42 = iprot.ReadListBegin();
                  for( int _i43 = 0; _i43 < _list42.Count; ++_i43)
                  {
                    BatchMutation _elem44 = new BatchMutation();
                    _elem44 = new BatchMutation();
                    _elem44.Read(iprot);
                    this.rowBatches.Add(_elem44);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.rowBatches = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutateRows_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.rowBatches != null) {
          field.Name = "rowBatches";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, this.rowBatches.Count));
            foreach (BatchMutation _iter45 in this.rowBatches)
            {
              _iter45.Write(oprot);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutateRows_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",rowBatches: ");
        sb.Append(this.rowBatches);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class mutateRows_result 
    {
      public IOError io;
      public IllegalArgument ia;

      public Isset __isset;
      public struct Isset {
        public bool io;
        public bool ia;
      }

      public mutateRows_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ia = new IllegalArgument();
                this.ia.Read(iprot);
                this.__isset.ia = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutateRows_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ia) {
          if (this.ia != null) {
            field.Name = "ia";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ia.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutateRows_result(");
        sb.Append("io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(",ia: ");
        sb.Append(this.ia== null ? "<null>" : this.ia.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class mutateRowsTs_args 
    {
      public byte[] tableName;
      public List<BatchMutation> rowBatches;
      public long timestamp;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool rowBatches;
        public bool timestamp;
      }

      public mutateRowsTs_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  this.rowBatches = new List<BatchMutation>();
                  TList _list46 = iprot.ReadListBegin();
                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)
                  {
                    BatchMutation _elem48 = new BatchMutation();
                    _elem48 = new BatchMutation();
                    _elem48.Read(iprot);
                    this.rowBatches.Add(_elem48);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.rowBatches = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                this.timestamp = iprot.ReadI64();
                this.__isset.timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutateRowsTs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.rowBatches != null) {
          field.Name = "rowBatches";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, this.rowBatches.Count));
            foreach (BatchMutation _iter49 in this.rowBatches)
            {
              _iter49.Write(oprot);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.timestamp);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutateRowsTs_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",rowBatches: ");
        sb.Append(this.rowBatches);
        sb.Append(",timestamp: ");
        sb.Append(this.timestamp);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class mutateRowsTs_result 
    {
      public IOError io;
      public IllegalArgument ia;

      public Isset __isset;
      public struct Isset {
        public bool io;
        public bool ia;
      }

      public mutateRowsTs_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ia = new IllegalArgument();
                this.ia.Read(iprot);
                this.__isset.ia = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("mutateRowsTs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ia) {
          if (this.ia != null) {
            field.Name = "ia";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ia.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("mutateRowsTs_result(");
        sb.Append("io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(",ia: ");
        sb.Append(this.ia== null ? "<null>" : this.ia.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class deleteAll_args 
    {
      public byte[] tableName;
      public byte[] row;
      public byte[] column;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool row;
        public bool column;
      }

      public deleteAll_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.row = iprot.ReadBinary();
                this.__isset.row = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                this.column = iprot.ReadBinary();
                this.__isset.column = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteAll_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.row != null) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.row);
          oprot.WriteFieldEnd();
        }
        if (this.column != null) {
          field.Name = "column";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.column);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteAll_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",row: ");
        sb.Append(this.row);
        sb.Append(",column: ");
        sb.Append(this.column);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class deleteAll_result 
    {
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool io;
      }

      public deleteAll_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteAll_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteAll_result(");
        sb.Append("io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class deleteAllTs_args 
    {
      public byte[] tableName;
      public byte[] row;
      public byte[] column;
      public long timestamp;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool row;
        public bool column;
        public bool timestamp;
      }

      public deleteAllTs_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.row = iprot.ReadBinary();
                this.__isset.row = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                this.column = iprot.ReadBinary();
                this.__isset.column = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                this.timestamp = iprot.ReadI64();
                this.__isset.timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteAllTs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.row != null) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.row);
          oprot.WriteFieldEnd();
        }
        if (this.column != null) {
          field.Name = "column";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.column);
          oprot.WriteFieldEnd();
        }
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.timestamp);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteAllTs_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",row: ");
        sb.Append(this.row);
        sb.Append(",column: ");
        sb.Append(this.column);
        sb.Append(",timestamp: ");
        sb.Append(this.timestamp);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class deleteAllTs_result 
    {
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool io;
      }

      public deleteAllTs_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteAllTs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteAllTs_result(");
        sb.Append("io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class deleteAllRow_args 
    {
      public byte[] tableName;
      public byte[] row;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool row;
      }

      public deleteAllRow_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.row = iprot.ReadBinary();
                this.__isset.row = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteAllRow_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.row != null) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.row);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteAllRow_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",row: ");
        sb.Append(this.row);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class deleteAllRow_result 
    {
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool io;
      }

      public deleteAllRow_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteAllRow_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteAllRow_result(");
        sb.Append("io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class deleteAllRowTs_args 
    {
      public byte[] tableName;
      public byte[] row;
      public long timestamp;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool row;
        public bool timestamp;
      }

      public deleteAllRowTs_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.row = iprot.ReadBinary();
                this.__isset.row = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                this.timestamp = iprot.ReadI64();
                this.__isset.timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteAllRowTs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.row != null) {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.row);
          oprot.WriteFieldEnd();
        }
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.timestamp);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteAllRowTs_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",row: ");
        sb.Append(this.row);
        sb.Append(",timestamp: ");
        sb.Append(this.timestamp);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class deleteAllRowTs_result 
    {
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool io;
      }

      public deleteAllRowTs_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deleteAllRowTs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deleteAllRowTs_result(");
        sb.Append("io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class scannerOpen_args 
    {
      public byte[] tableName;
      public byte[] startRow;
      public List<byte[]> columns;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool startRow;
        public bool columns;
      }

      public scannerOpen_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.startRow = iprot.ReadBinary();
                this.__isset.startRow = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  this.columns = new List<byte[]>();
                  TList _list50 = iprot.ReadListBegin();
                  for( int _i51 = 0; _i51 < _list50.Count; ++_i51)
                  {
                    byte[] _elem52 = null;
                    _elem52 = iprot.ReadBinary();
                    this.columns.Add(_elem52);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.columns = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scannerOpen_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.startRow != null) {
          field.Name = "startRow";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.startRow);
          oprot.WriteFieldEnd();
        }
        if (this.columns != null) {
          field.Name = "columns";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, this.columns.Count));
            foreach (byte[] _iter53 in this.columns)
            {
              oprot.WriteBinary(_iter53);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scannerOpen_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",startRow: ");
        sb.Append(this.startRow);
        sb.Append(",columns: ");
        sb.Append(this.columns);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class scannerOpen_result 
    {
      public int success;
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool success;
        public bool io;
      }

      public scannerOpen_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scannerOpen_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scannerOpen_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class scannerOpenWithStop_args 
    {
      public byte[] tableName;
      public byte[] startRow;
      public byte[] stopRow;
      public List<byte[]> columns;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool startRow;
        public bool stopRow;
        public bool columns;
      }

      public scannerOpenWithStop_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.startRow = iprot.ReadBinary();
                this.__isset.startRow = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                this.stopRow = iprot.ReadBinary();
                this.__isset.stopRow = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  this.columns = new List<byte[]>();
                  TList _list54 = iprot.ReadListBegin();
                  for( int _i55 = 0; _i55 < _list54.Count; ++_i55)
                  {
                    byte[] _elem56 = null;
                    _elem56 = iprot.ReadBinary();
                    this.columns.Add(_elem56);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.columns = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scannerOpenWithStop_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.startRow != null) {
          field.Name = "startRow";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.startRow);
          oprot.WriteFieldEnd();
        }
        if (this.stopRow != null) {
          field.Name = "stopRow";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.stopRow);
          oprot.WriteFieldEnd();
        }
        if (this.columns != null) {
          field.Name = "columns";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, this.columns.Count));
            foreach (byte[] _iter57 in this.columns)
            {
              oprot.WriteBinary(_iter57);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scannerOpenWithStop_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",startRow: ");
        sb.Append(this.startRow);
        sb.Append(",stopRow: ");
        sb.Append(this.stopRow);
        sb.Append(",columns: ");
        sb.Append(this.columns);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class scannerOpenWithStop_result 
    {
      public int success;
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool success;
        public bool io;
      }

      public scannerOpenWithStop_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scannerOpenWithStop_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scannerOpenWithStop_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class scannerOpenTs_args 
    {
      public byte[] tableName;
      public byte[] startRow;
      public List<byte[]> columns;
      public long timestamp;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool startRow;
        public bool columns;
        public bool timestamp;
      }

      public scannerOpenTs_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.startRow = iprot.ReadBinary();
                this.__isset.startRow = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  this.columns = new List<byte[]>();
                  TList _list58 = iprot.ReadListBegin();
                  for( int _i59 = 0; _i59 < _list58.Count; ++_i59)
                  {
                    byte[] _elem60 = null;
                    _elem60 = iprot.ReadBinary();
                    this.columns.Add(_elem60);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.columns = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                this.timestamp = iprot.ReadI64();
                this.__isset.timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scannerOpenTs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.startRow != null) {
          field.Name = "startRow";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.startRow);
          oprot.WriteFieldEnd();
        }
        if (this.columns != null) {
          field.Name = "columns";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, this.columns.Count));
            foreach (byte[] _iter61 in this.columns)
            {
              oprot.WriteBinary(_iter61);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.timestamp);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scannerOpenTs_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",startRow: ");
        sb.Append(this.startRow);
        sb.Append(",columns: ");
        sb.Append(this.columns);
        sb.Append(",timestamp: ");
        sb.Append(this.timestamp);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class scannerOpenTs_result 
    {
      public int success;
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool success;
        public bool io;
      }

      public scannerOpenTs_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scannerOpenTs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scannerOpenTs_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class scannerOpenWithStopTs_args 
    {
      public byte[] tableName;
      public byte[] startRow;
      public byte[] stopRow;
      public List<byte[]> columns;
      public long timestamp;

      public Isset __isset;
      public struct Isset {
        public bool tableName;
        public bool startRow;
        public bool stopRow;
        public bool columns;
        public bool timestamp;
      }

      public scannerOpenWithStopTs_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.tableName = iprot.ReadBinary();
                this.__isset.tableName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.startRow = iprot.ReadBinary();
                this.__isset.startRow = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                this.stopRow = iprot.ReadBinary();
                this.__isset.stopRow = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  this.columns = new List<byte[]>();
                  TList _list62 = iprot.ReadListBegin();
                  for( int _i63 = 0; _i63 < _list62.Count; ++_i63)
                  {
                    byte[] _elem64 = null;
                    _elem64 = iprot.ReadBinary();
                    this.columns.Add(_elem64);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.columns = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                this.timestamp = iprot.ReadI64();
                this.__isset.timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scannerOpenWithStopTs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.tableName != null) {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.tableName);
          oprot.WriteFieldEnd();
        }
        if (this.startRow != null) {
          field.Name = "startRow";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.startRow);
          oprot.WriteFieldEnd();
        }
        if (this.stopRow != null) {
          field.Name = "stopRow";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.stopRow);
          oprot.WriteFieldEnd();
        }
        if (this.columns != null) {
          field.Name = "columns";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, this.columns.Count));
            foreach (byte[] _iter65 in this.columns)
            {
              oprot.WriteBinary(_iter65);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(this.timestamp);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scannerOpenWithStopTs_args(");
        sb.Append("tableName: ");
        sb.Append(this.tableName);
        sb.Append(",startRow: ");
        sb.Append(this.startRow);
        sb.Append(",stopRow: ");
        sb.Append(this.stopRow);
        sb.Append(",columns: ");
        sb.Append(this.columns);
        sb.Append(",timestamp: ");
        sb.Append(this.timestamp);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class scannerOpenWithStopTs_result 
    {
      public int success;
      public IOError io;

      public Isset __isset;
      public struct Isset {
        public bool success;
        public bool io;
      }

      public scannerOpenWithStopTs_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scannerOpenWithStopTs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scannerOpenWithStopTs_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class scannerGet_args 
    {
      public int id;

      public Isset __isset;
      public struct Isset {
        public bool id;
      }

      public scannerGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                this.id = iprot.ReadI32();
                this.__isset.id = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scannerGet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.id);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scannerGet_args(");
        sb.Append("id: ");
        sb.Append(this.id);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class scannerGet_result 
    {
      public TRowResult success;
      public IOError io;
      public IllegalArgument ia;
      public NotFound nf;

      public Isset __isset;
      public struct Isset {
        public bool success;
        public bool io;
        public bool ia;
        public bool nf;
      }

      public scannerGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new TRowResult();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ia = new IllegalArgument();
                this.ia.Read(iprot);
                this.__isset.ia = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.nf = new NotFound();
                this.nf.Read(iprot);
                this.__isset.nf = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scannerGet_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ia) {
          if (this.ia != null) {
            field.Name = "ia";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ia.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.nf) {
          if (this.nf != null) {
            field.Name = "nf";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.nf.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scannerGet_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(",ia: ");
        sb.Append(this.ia== null ? "<null>" : this.ia.ToString());
        sb.Append(",nf: ");
        sb.Append(this.nf== null ? "<null>" : this.nf.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class scannerClose_args 
    {
      public int id;

      public Isset __isset;
      public struct Isset {
        public bool id;
      }

      public scannerClose_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                this.id = iprot.ReadI32();
                this.__isset.id = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scannerClose_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.id);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scannerClose_args(");
        sb.Append("id: ");
        sb.Append(this.id);
        sb.Append(")");
        return sb.ToString();
      }

    }

    public class scannerClose_result 
    {
      public IOError io;
      public IllegalArgument ia;

      public Isset __isset;
      public struct Isset {
        public bool io;
        public bool ia;
      }

      public scannerClose_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        TStruct struc = iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.io = new IOError();
                this.io.Read(iprot);
                this.__isset.io = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ia = new IllegalArgument();
                this.ia.Read(iprot);
                this.__isset.ia = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("scannerClose_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.io) {
          if (this.io != null) {
            field.Name = "io";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.io.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ia) {
          if (this.ia != null) {
            field.Name = "ia";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ia.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("scannerClose_result(");
        sb.Append("io: ");
        sb.Append(this.io== null ? "<null>" : this.io.ToString());
        sb.Append(",ia: ");
        sb.Append(this.ia== null ? "<null>" : this.ia.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
